/* Generated By:JavaCC: Do not edit this line. erm.java */
package mer;
import java.io.*;
import java.util.Vector;

import analise.Token;


@SuppressWarnings("all")
public class erm implements ermConstants {
 static Vector<String> entidades = new Vector<String>();	
 static Vector<ComponenteER> componentesER = new Vector<ComponenteER>();
 static ERDiagram DER= new ERDiagram();
 static String nomedoarquivo = new String(); 
	
  public static void main(String args[]) throws ParseException {
    erm parser = null;

            try{
   parser = new erm(new ermTokenManager
                                                (new JavaCharStream
                                                (new FileReader
                                                (new File("C:\\Users\\CNPQ-2\\Desktop\\ermodel.txt")))));

        }catch (FileNotFoundException e) {
                System.out.println("File not found. Exiting. Excessao: "+ e);
        }

    //while (true) {
      //System.out.println("Reading from standard input...");
      //System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try {
        switch (erm.entity_relationship_model(nomedoarquivo)) {
        case 0:
          System.out.println("OK.");
          break;
        case 1:
          System.out.println("Goodbye.");
          break;
        default:
          break;
        }
      } catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        //erm.ReInit(System.in);
      } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        //break;
      }
    //}
  }
  static final public void setERDiagram(){
	String declaraentidades = new String();
	String declaraatributos = new String();
	String declararelacionamentos = new String();
	String adicionaatributos = new String();
	String adicionarelacionamentos = new String();
	
	if(!componentesER.isEmpty()){
		
	for(int i=0; i<componentesER.size();i++){
		componentesER.elementAt(i).setRotulodot("entidade"+i);
		declaraentidades = declaraentidades + "node [shape = box]" + 
							  "{ node [ label = \" " + 
							  componentesER.elementAt(i).getNomeEntidade() + 
							  " \" ]" + "entidade" + i + "; }" 
							  ;}
	declaraatributos = declaraatributos + "node [shape = ellipse]";
	
	for(int i=0; i<componentesER.size();i++){
		for(int j = 0; j<componentesER.elementAt(i).getAtributos().size(); j++){
		
		declaraatributos = declaraatributos  + 
							  "{ node [ label = \" " + 
							  componentesER.elementAt(i).getAtributos().elementAt(j) + 
							  " \" ]" + "atributo" + i + j +  "; }" 
							  ;}	
		
		}
	
	declararelacionamentos = "node [shape=diamond,style=filled,color=lightgrey];";

	
	for(int i=0; i<componentesER.size();i++){
		for(int j = 0; j<componentesER.elementAt(i).getAtributos().size(); j++){
		
			adicionaatributos = adicionaatributos  + 
							 "atributo" + i + j +  "--" + "entidade" + i + ";" ; 
							  }	
		
		}
	//int contarel2 = 0;
	for(int i=0;i<componentesER.size();i++){
		if(!componentesER.elementAt(i).getOutrasEntidades().isEmpty()){			
		//System.out.println("nome da entidade: " + componentesER.elementAt(i).getNomeEntidade());	
		//System.out.println("outras entidades: " + componentesER.elementAt(i).getOutrasEntidades());		
		//adicionarelacionamentos = adicionarelacionamentos 	 	
		 for(int j=0;j<componentesER.elementAt(i).getOutrasEntidades().size();j++){
			 //System.out.println("igual");
			 for(int k=0;k<componentesER.size();k++){
					if(componentesER.elementAt(i).getOutrasEntidades().elementAt(j).equals(componentesER.elementAt(k).getNomeEntidade())){
						//System.out.println("igual");		
						adicionarelacionamentos = adicionarelacionamentos + componentesER.elementAt(k).getRotulodot() +"--"+ componentesER.elementAt(i).getRotulodot() + ";";	 
						//adicionarelacionamentos = adicionarelacionamentos + " \"relacionamento\" " + contarel2  + "--" + componentesER.elementAt(i).getRotulodot() + ";";
					}
			 }
		 
		  }	

	}
	}
	
	}
	DER.geraDiagrama(declaraentidades + declaraatributos + adicionaatributos + adicionarelacionamentos, nomedoarquivo);
	  }
  static final public int entity_relationship_model(String arquivo) throws ParseException {
    
	  nomedoarquivo = arquivo ; 
	jj_consume_token(ENTITY_RELATIONSHIP_MODEL);
    jj_consume_token(10);
    nomeComponente();
    jj_consume_token(11);
    jj_consume_token(12);
    label_1:
    while (true) {
      entity();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTITY:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHABETIC:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      relationship();
    }
    jj_consume_token(13);
    jj_consume_token(0);
    setERDiagram();
              {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  static final public void entity() throws ParseException {
    String entidade = new String();
    Vector<String> atributos = new Vector<String>();
	jj_consume_token(ENTITY);
    entidade = nomeComponente();
    //entidades.addElement(entidade);
    //System.out.println("entidade: " + entidade);
    jj_consume_token(10);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHABETIC:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      atributos = atributes();
      //System.out.println("atributos: " + atributos);
      componentesER.addElement(new ComponenteER(entidade, atributos));
      
    }
    jj_consume_token(11);
    jj_consume_token(14);
  }

  static final public Vector<String> atributes() throws ParseException {
	 Vector<String> atributos = new Vector<String>(); 
	 String atributo = new String(); 
	 String atributo2 = new String(); 
	 boolean composto = false;
	 Token tok = new Token();
	 
    //tok = jj_consume_token(ALPHABETIC);
    
    atributo = nomeComponente();
    //System.out.println("atributo: " + atributo);
   
    atributos.addElement(atributo);	
  
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      jj_consume_token(15);
      
      //tok = jj_consume_token(ALPHABETIC);
      //composto = true;
      atributo2 = nomeComponente();
      atributos.addElement(atributo2);	
      //System.out.println("atributo2: " + atributo2);
     
    }
    
    return atributos;
  }

  static final public void relationship() throws ParseException {
	String entidade = new String(); 
	Vector<String> associados = new Vector<String>();
	
	entidade = nomeComponente();
	

	
    jj_consume_token(RELATIONED);
    jj_consume_token(TO);
    label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALPHABETIC:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
          associados = atributes();
        }
    jj_consume_token(14);
    
	if(!componentesER.isEmpty()){
		for(int i=0;i<componentesER.size();i++){
		if(entidade.equals(componentesER.elementAt(i).getNomeEntidade())){
			componentesER.elementAt(i).setEntidades(associados);
		}	
		}	
		}

  }

  static final public String nomeComponente() throws ParseException {
Token tok = new Token();
//Vector<String> nomesvct = new Vector<String> ();
String descr = new String();
String topic = new String();
    label_5:
    while (true) {
      tok = jj_consume_token(ALPHABETIC);
      descr=descr + " " + tok.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHABETIC:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
    }
 return descr;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ermTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x200,0x200,0x8000,0x200,};
   }

  /** Constructor with InputStream. */
  public erm(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public erm(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ermTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public erm(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ermTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public erm(ermTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ermTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

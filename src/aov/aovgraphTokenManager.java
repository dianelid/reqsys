/* Generated By:JavaCC: Do not edit this line. aovgraphTokenManager.java */
package aov;
import java.io.*;
import java.util.*;
import analise.JavaCharStream;
import analise.ParseException;
import analise.SimpleNode;
import analise.Token;
import analise.TokenMgrError;

/** Token Manager. */
@SuppressWarnings("all")
public class aovgraphTokenManager implements aovgraphConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200003fffffffe0L) != 0L)
         {
            jjmatchedKind = 38;
            return 27;
         }
         if ((active0 & 0x50000000000L) != 0L)
            return 25;
         return -1;
      case 1:
         if ((active0 & 0x4000000L) != 0L)
            return 27;
         if ((active0 & 0x200003961d90020L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
            return 27;
         }
         if ((active0 & 0x40000000000L) != 0L)
            return 23;
         if ((active0 & 0x8a240000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
            return 8;
         }
         if ((active0 & 0x200009200L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
            return 28;
         }
         if ((active0 & 0x410026dc0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
            return 29;
         }
         return -1;
      case 2:
         if ((active0 & 0x412000000L) != 0L)
            return 27;
         if ((active0 & 0x2001010000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
            return 29;
         }
         if ((active0 & 0x1be8fede80L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
            return 27;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
            return 20;
         }
         if ((active0 & 0x2140L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
            return 28;
         }
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
            return 16;
         }
         return -1;
      case 3:
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 3;
            }
            return 16;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 3;
            }
            return 28;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200002800fd4ca0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 3;
            }
            return 27;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 3;
            }
            return 20;
         }
         if ((active0 & 0x24000a340L) != 0L)
            return 27;
         if ((active0 & 0x80020000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 3;
            }
            return 8;
         }
         if ((active0 & 0x100000000L) != 0L)
            return 16;
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 3;
            }
            return 29;
         }
         return -1;
      case 4:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x4080L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
            return 20;
         }
         if ((active0 & 0x820000000L) != 0L)
            return 27;
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
            return 8;
         }
         if ((active0 & 0x200001001ffbc60L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
            return 27;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
            return 7;
         }
         return -1;
      case 5:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x3000101800L) != 0L)
            return 27;
         if ((active0 & 0x816fa460L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
            return 27;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
            return 28;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
            return 8;
         }
         if ((active0 & 0x4080L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
            return 19;
         }
         return -1;
      case 6:
         if ((active0 & 0x840000L) != 0L)
            return 27;
         if ((active0 & 0x4080L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
            return 18;
         }
         if ((active0 & 0x2000000016ba020L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
            return 27;
         }
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
            return 28;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 8;
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
            return 29;
         }
         return -1;
      case 7:
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 7;
            }
            return 29;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 7;
            }
            return 16;
         }
         if ((active0 & 0x102e080L) != 0L)
            return 27;
         if ((active0 & 0x490440L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 7;
            }
            return 27;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000L) != 0L)
            return 27;
         if ((active0 & 0x294460L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 8;
            return 27;
         }
         return -1;
      case 9:
         if ((active0 & 0x80040L) != 0L)
            return 27;
         if ((active0 & 0x14020L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 9;
            return 27;
         }
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 9;
            return 29;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x4020L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 10;
            return 27;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 10;
            return 8;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x400L) != 0L)
            return 8;
         return -1;
      case 11:
         if ((active0 & 0x4000L) != 0L)
            return 27;
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 11;
            return 8;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
            return 20;
         return -1;
      case 12:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 12;
            return 27;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 13;
            return 27;
         }
         return -1;
      case 14:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 14;
            return 27;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 15;
            return 27;
         }
         return -1;
      case 16:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 16;
            return 27;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 17;
            return 29;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 18;
            return 27;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 19;
            return 27;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 50);
      case 41:
         return jjStopAtPos(0, 51);
      case 44:
         return jjStopAtPos(0, 53);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x50000000000L);
      case 58:
         return jjStopAtPos(0, 56);
      case 59:
         return jjStopAtPos(0, 49);
      case 61:
         return jjStopAtPos(0, 52);
      case 91:
         return jjStopAtPos(0, 54);
      case 93:
         return jjStopAtPos(0, 55);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2802500020L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1020000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10400L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x2140L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x140000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8240000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1020000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x84880L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x9200L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 123:
         return jjStopAtPos(0, 47);
      case 125:
         return jjStopAtPos(0, 48);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 23);
         break;
      case 47:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200009200L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200001100000000L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8a240000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x410026dc0L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 27);
         return jjMoveStringLiteralDfa2_0(active0, 0x2021010000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40080000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2140L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8040000L);
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 27);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20800000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000004080L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x280000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2001010000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x40001400L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8200L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x800600000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x800200020L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 107:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 108:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x42040L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80020000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 112:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 16);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x400c00L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x90000L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x4080L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200002000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0xa040L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100820L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1801400L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x4080L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 107:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 27);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x88000000L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000200000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x30000L);
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 27);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 27);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4080L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(5, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x100a000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x200020L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4480L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0xa000L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 8);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 27);
         break;
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0x1080000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x430000L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L);
      case 102:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 27);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 27);
         break;
      case 108:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 27);
         return jjMoveStringLiteralDfa8_0(active0, 0x410400L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 121:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 27);
         return jjMoveStringLiteralDfa9_0(active0, 0x200040L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x90000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 19, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x10020L);
      case 108:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 6, 27);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4020L);
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 10, 8);
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
      case 102:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(11, 14, 27);
         break;
      case 103:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 16, 20);
         break;
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x20L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa16_0(active0, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa17_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa19_0(active0, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 108:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(20, 5, 27);
         break;
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(20, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 27;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 1:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 5);
                  break;
               case 19:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 5);
                  break;
               case 29:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 5);
                  break;
               case 16:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 5);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(22);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 18:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 5);
                  break;
               case 7:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 5);
                  break;
               case 20:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 5);
                  break;
               case 28:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 5);
                  break;
               case 27:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 5);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 25:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 5);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 5);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 114)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(6, 9);
                  }
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 5);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 114)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(6, 9);
                  }
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 5);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 5);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 5);
                  }
                  if (curChar == 108)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 5);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 116)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(10, 12);
                  }
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 114)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(6, 9);
                  }
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 5);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 5);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 5);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 5);
                  break;
               case 2:
                  if (curChar != 100)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(13, 17);
                  break;
               case 3:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar != 114)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(6, 9);
                  break;
               case 6:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar != 121)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddTwoStates(17, 21);
                  break;
               case 11:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 21:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 24:
                  if (kind > 41)
                     kind = 41;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 41)
                     kind = 41;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 27 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x200000000000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 43)
                     kind = 43;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x100000000000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   1, 4, 6, 9, 17, 21, 6, 9, 17, 21, 9, 17, 21, 4, 6, 9, 
   17, 21, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, 
"\141\163\160\145\143\164\137\157\162\151\145\156\164\145\144\137\155\157\144\145\154", "\147\157\141\154\137\155\157\144\145\154", 
"\163\157\146\164\147\157\141\154", "\147\157\141\154", "\164\141\163\153", 
"\143\157\162\162\145\154\141\164\151\157\156", "\163\157\165\162\143\145", "\164\141\162\147\145\164", 
"\147\157\141\154\137\162\145\146", "\163\157\146\164\147\157\141\154\137\162\145\146", 
"\164\141\163\153\137\162\145\146", "\143\162\157\163\163\143\165\164\164\151\156\147", 
"\160\157\151\156\164\143\165\164", "\151\156\143\154\165\144\145", "\163\165\142\163\164\151\164\165\164\145", 
"\141\144\166\151\143\145", 
"\151\156\164\145\162\164\171\160\145\40\144\145\143\154\141\162\141\164\151\157\156", "\141\164\164\162\151\142\165\164\145", "\145\154\145\155\145\156\164", 
"\160\162\157\160\145\162\164\171", "\141\156\144", "\157\162", "\151\156\143\55\157\162", "\170\157\162", 
"\142\162\145\141\153", "\150\165\162\164", "\165\156\153\156\157\167\156", "\150\145\154\160", 
"\155\141\153\145", "\156\157\164", "\141\146\164\145\162", "\142\145\146\157\162\145", 
"\141\162\157\165\156\144", null, null, null, null, null, null, null, null, null, "\173", "\175", "\73", 
"\50", "\51", "\75", "\54", "\133", "\135", "\72", "\162\145\147\165\154\141\162", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3ff80ffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x38000000001eL, 
};
static final long[] jjtoSpecial = {
   0x380000000000L, 
};
static final long[] jjtoMore = {
   0x470000000000L, 
};
static protected JavaCharStream input_stream;
static private final int[] jjrounds = new int[27];
static private final int[] jjstateSet = new int[54];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public aovgraphTokenManager(JavaCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public aovgraphTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 27; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 46)
         {
            jjmatchedKind = 46;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 46)
         {
            jjmatchedKind = 46;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 46)
         {
            jjmatchedKind = 46;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 41 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

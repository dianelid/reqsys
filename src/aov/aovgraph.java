/* Generated By:JavaCC: Do not edit this line. aovgraph.java */
package aov;
import java.io.*;
import java.util.*;
import analise.JavaCharStream;
import analise.ParseException;
import analise.SimpleNode;
import analise.Token;
import analise.TokenMgrError;

@SuppressWarnings("all")
public class aovgraph implements aovgraphTreeConstants, aovgraphConstants {
        protected static JJTaovgraphState jjtree = new JJTaovgraphState();
        static java.util.Vector<String> referencias = new java.util.Vector<String>();
        static TokenMgrError erro = new TokenMgrError();
        static java.util.Vector<String> componentes = new java.util.Vector<String>();
        static java.util.Vector<String> intertypedeclarationvct = new java.util.Vector<String>();
        static java.util.Vector<String> advicevct = new java.util.Vector<String>();
        static java.util.Vector<String> composicaovct = new java.util.Vector<String>();
        static java.util.Vector<String> componentecompleto = new java.util.Vector<String>();
        static java.util.Vector<String> filhosvct = new java.util.Vector<String>();
        static java.util.Hashtable<String, String> paishash = new java.util.Hashtable<String, String>();
        static java.util.Hashtable<String, String> paisderefhash = new java.util.Hashtable<String, String>();
        static java.util.Hashtable<String, String> contribui = new java.util.Hashtable<String, String>();
        static java.util.Vector<String> verificaIntertypevct = new java.util.Vector<String>();
        static java.util.Vector<String> intertypePointcutsvct = new java.util.Vector<String>();
        static java.util.Vector<String> substitutevct = new java.util.Vector<String>();
        static java.util.Vector<String> componentestpcvct = new java.util.Vector<String>();
        static boolean tpc = false;
        static java.util.Vector<Pointcut> pointcuts = new java.util.Vector<Pointcut>();

        public static void main(String args[]) throws ParseException {
        }

        final public Hashtable retornaContribui(){
                return contribui;
        }

        final public Vector retornaPointcuts(){
                return pointcuts;
        }

        final public Vector retornaComponentecomTopico(){
                return componentestpcvct;
        }

        final public Vector retornaAdvice(){
                return advicevct;
        }

        final public Vector retornaComposicao(){
                return composicaovct;
        }

        final public Vector retornaComponenteCompleto(){
                return componentecompleto;
        }

        final public Vector retornaComponentes(){
                return componentes;
        }

        final public Vector retornaFilhos(){
                return filhosvct;
        }

        final public Hashtable retornaPais(){
                return paishash;
        }

        final public Hashtable retornaPaisdeRef(){
                return paisderefhash;
        }

        final public Vector retornaIntertype(){
                return intertypedeclarationvct;
        }

  static final public int aspect_oriented_model() throws ParseException {
        SimpleNode jjtn000 = new SimpleNode(JJTASPECT_ORIENTED_MODEL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        String goalmodel=new String("intit");
        Token tok;
        java.util.Vector<String> components = new java.util.Vector<String>();
        java.util.Vector<String> components3 = new java.util.Vector<String>();
        java.util.Vector<String> componentsdescricao = new java.util.Vector<String>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASPECT_ORIENTED_MODEL:
        tok = jj_consume_token(ASPECT_ORIENTED_MODEL);
           composicaovct.addElement(tok.image);
        tok = jj_consume_token(47);
           composicaovct.addElement(tok.image);
        label_1:
        while (true) {
          goalmodel = goal_model();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case GOAL_MODEL:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
        }
        tok = jj_consume_token(48);
                   composicaovct.addElement(tok.image);
        tok = jj_consume_token(49);
                   composicaovct.addElement(tok.image);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
                erro.geraArquivoErro();
                VerificacaoSemantica verificacaoclass = new VerificacaoSemantica();
                verificacaoclass.validaComponente(componentes);
                verificacaoclass.validaSubstitute(substitutevct, intertypePointcutsvct);
                if(referencias.size()>0){
                        verificacaoclass.validaReferencia(componentes, referencias);
                }
                {if (true) return 0;}
        break;
      case 0:
        jj_consume_token(0);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               {if (true) return 0;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String goal_model() throws ParseException {
        SimpleNode jjtn000 = new SimpleNode(JJTGOAL_MODEL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);//System.out.println("GOALM ");
        Token tok;
        java.util.Vector<String> componentimage = new java.util.Vector<String>();
        java.util.Vector<String> correlationimage = new java.util.Vector<String>();
        String components = new String("inicializacao");
        String relation = new String("sem_referencias");
        boolean crosscutting = false;
        boolean opera = true;
        String nome = new String();
    try {
      tok = jj_consume_token(GOAL_MODEL);
                             composicaovct.addElement("<br>" + tok.image +" ");
      tok = jj_consume_token(50);
                    composicaovct.addElement(tok.image);
      label_2:
      while (true) {
        nome = nomeComponente();
                                     composicaovct.addElement(nome);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHABETIC:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
      tok = jj_consume_token(49);
                    composicaovct.addElement(tok.image);
      tok = jj_consume_token(ALPHABETIC);
                             composicaovct.addElement(tok.image);
      tok = jj_consume_token(51);
                     composicaovct.addElement(tok.image);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 47:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        tok = jj_consume_token(47);
                     composicaovct.addElement(tok.image);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SOFTGOAL:
          case GOAL:
          case TASK:
          case GOAL_REF:
          case SOFTGOAL_REF:
          case TASK_REF:
          case 50:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_4;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case GOAL_REF:
          case SOFTGOAL_REF:
          case TASK_REF:
          case 50:
            joinpoint(crosscutting, opera);
            break;
          case SOFTGOAL:
          case GOAL:
          case TASK:
            label_5:
            while (true) {
              components = component(crosscutting);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SOFTGOAL:
              case GOAL:
              case TASK:
                ;
                break;
              default:
                jj_la1[5] = jj_gen;
                break label_5;
              }
            }
                     componentimage.addElement(components);
                                 components = (String)componentimage.elementAt(0);
                                 for (int i = 1; i < componentimage.size(); i++) {
                                      components += " " + (String)componentimage.elementAt(i);
                                 }
            label_6:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case CORRELATION_REL:
              case CROSSCUTTING_REL:
                ;
                break;
              default:
                jj_la1[6] = jj_gen;
                break label_6;
              }
              relation = relationship(components);
                                                                  correlationimage.addElement(relation);
            }
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        tok = jj_consume_token(48);
                             composicaovct.addElement(tok.image);
      }
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              {if (true) return components;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String component(boolean cross) throws ParseException {
        SimpleNode jjtn000 = new SimpleNode(JJTCOMPONENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token tok;
        String component;
        boolean crosscutting = cross;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOFTGOAL:
        component = softgoal(crosscutting);
        break;
      case GOAL:
        component = goal(crosscutting);
        break;
      case TASK:
        component = task(crosscutting);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       {if (true) return component;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
        jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String softgoal(boolean cross) throws ParseException {
    SimpleNode jjtn000 = new SimpleNode(JJTSOFTGOAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);//System.out.println("softgoal ");
    Token tok;
    String descricao= new String(), componentname = new String() ;
    java.util.Vector<String> softgoalimage = new java.util.Vector<String>();
    java.util.Vector<String> softgoaldescricao = new java.util.Vector<String>();
    java.util.Vector<String> filhosimage = new java.util.Vector<String>();
    String retorno = new String();
    String compcompleto = new String();
    String componentesdescr = new String();
        String Key = new String("ID");
        String joinpoint = new String();
        boolean crosscutting = cross;
        String topic = new String();
        String nome=new String();
        boolean opera = true;
        tpc = false;
        String comptcp = new String();
        String value = new String();
        boolean padrao = true;
    try {
      tok = jj_consume_token(SOFTGOAL);
                           softgoaldescricao.addElement(tok.image + " ");
        composicaovct.addElement("<br>" + tok.image + " ");
      label_7:
      while (true) {
        nome = nomeComponente();
                                  softgoalimage.addElement(nome);
        softgoaldescricao.addElement(nome);
        composicaovct.addElement(nome);
        componentname="sem_filhos";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHABETIC:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_7;
        }
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
        topic = topic();
                          softgoalimage.addElement(topic);
        softgoaldescricao.addElement(topic);
        composicaovct.addElement(topic);
      }
      tok = jj_consume_token(50);
                   softgoaldescricao.addElement(tok.image); composicaovct.addElement(tok.image);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case INCOR:
        case XOR:
        case BREAK:
        case HURT:
        case UNKNOWN:
        case HELP:
        case MAKE:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          tok = jj_consume_token(AND);
                        padrao = false;
          break;
        case OR:
          tok = jj_consume_token(OR);
                                                     padrao = false;
          break;
        case XOR:
          tok = jj_consume_token(XOR);
                                                                                   padrao = false;
          break;
        case INCOR:
          tok = jj_consume_token(INCOR);
                         padrao = false;
          break;
        case BREAK:
          tok = jj_consume_token(BREAK);
                                                         padrao = false;
          break;
        case HURT:
          tok = jj_consume_token(HURT);
                                                                                        padrao = false;
          break;
        case UNKNOWN:
          tok = jj_consume_token(UNKNOWN);
                           padrao = false;
          break;
        case HELP:
          tok = jj_consume_token(HELP);
                                                          padrao = false;
          break;
        case MAKE:
          tok = jj_consume_token(MAKE);
                                                                                         padrao = false;
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
             if(padrao){
                    contribui.put(nome, "and");
                 }else{
                        contribui.put(nome, tok.image);
                 }
            composicaovct.addElement(tok.image);
            softgoaldescricao.addElement(tok.image);
        tok = jj_consume_token(49);
                 softgoaldescricao.addElement(tok.image);
                composicaovct.addElement(tok.image);
      }
      tok = jj_consume_token(ALPHABETIC);
     softgoaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
      tok = jj_consume_token(49);
     softgoaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_10;
        }
        tok = jj_consume_token(50);
     softgoaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
        tok = jj_consume_token(ALPHABETIC);
     softgoaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
        tok = jj_consume_token(51);
     softgoaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
        tok = jj_consume_token(49);
     softgoaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
        tok = jj_consume_token(50);
     softgoaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
        tok = jj_consume_token(ALPHABETIC);
     softgoaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
        tok = jj_consume_token(51);
     softgoaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_11;
        }
        tok = jj_consume_token(51);
     softgoaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
    componentesdescr = ((String)softgoaldescricao.elementAt(0)) ;
        for (int i = 1; i < softgoaldescricao.size(); i++) {
           componentesdescr +=(String)softgoaldescricao.elementAt(i);
        }
        
        componentes.addElement(componentesdescr);
    
    if(tpc){
        comptcp= organizaComponentecomTopico(componentesdescr);
        componentestpcvct.addElement(comptcp);
    }
        tok = jj_consume_token(47);
     softgoaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROPERTY:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_12;
          }
          tok = jj_consume_token(PROPERTY);
                    composicaovct.addElement(tok.image); softgoalimage.addElement(tok.image);
          tok = jj_consume_token(47);
             composicaovct.addElement(tok.image); softgoalimage.addElement(tok.image);
          label_13:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ALPHABETIC:
              ;
              break;
            default:
              jj_la1[16] = jj_gen;
              break label_13;
            }
            tok = jj_consume_token(ALPHABETIC);
                      composicaovct.addElement(tok.image); softgoalimage.addElement(tok.image);
            tok = jj_consume_token(52);
             composicaovct.addElement(tok.image); softgoalimage.addElement(tok.image);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUMERO:
              tok = jj_consume_token(NUMERO);
                   composicaovct.addElement(tok.image); softgoalimage.addElement(tok.image);
              break;
            case ALPHABETIC:
              tok = jj_consume_token(ALPHABETIC);
                      composicaovct.addElement(tok.image); softgoalimage.addElement(tok.image);
              break;
            case 50:
              tok = jj_consume_token(50);
             composicaovct.addElement(tok.image); softgoalimage.addElement(tok.image);
              label_14:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SOFTGOAL:
                case GOAL:
                case TASK:
                case GOAL_REF:
                case SOFTGOAL_REF:
                case TASK_REF:
                  ;
                  break;
                default:
                  jj_la1[17] = jj_gen;
                  break label_14;
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case TASK:
                  tok = jj_consume_token(TASK);
                     composicaovct.addElement(tok.image+" "); softgoalimage.addElement(tok.image);
                  break;
                case GOAL:
                  tok = jj_consume_token(GOAL);
                composicaovct.addElement(tok.image+" "); softgoalimage.addElement(tok.image);
                  break;
                case SOFTGOAL:
                  tok = jj_consume_token(SOFTGOAL);
                    composicaovct.addElement(tok.image+" "); softgoalimage.addElement(tok.image);
                  break;
                case TASK_REF:
                  tok = jj_consume_token(TASK_REF);
                    composicaovct.addElement(tok.image+" "); softgoalimage.addElement(tok.image);
                  break;
                case GOAL_REF:
                  tok = jj_consume_token(GOAL_REF);
                    composicaovct.addElement(tok.image+" "); softgoalimage.addElement(tok.image);
                  break;
                case SOFTGOAL_REF:
                  tok = jj_consume_token(SOFTGOAL_REF);
                        composicaovct.addElement(tok.image+" "); softgoalimage.addElement(tok.image);
                  break;
                default:
                  jj_la1[18] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                nome = nomeComponente();
                             softgoalimage.addElement(nome); composicaovct.addElement(nome);
                tok = jj_consume_token(53);
             softgoalimage.addElement(tok.image); composicaovct.addElement(tok.image);
              }
              tok = jj_consume_token(51);
             composicaovct.addElement(tok.image); softgoalimage.addElement(tok.image);
              break;
            default:
              jj_la1[19] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            tok = jj_consume_token(49);
             composicaovct.addElement(tok.image); softgoalimage.addElement(tok.image);
          }
          tok = jj_consume_token(48);
             composicaovct.addElement(tok.image); softgoalimage.addElement(tok.image);
        }
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SOFTGOAL:
          case GOAL:
          case TASK:
            ;
            break;
          default:
            jj_la1[20] = jj_gen;
            break label_15;
          }
          componentname = component(crosscutting);
     String partes[] = componentname.split("\u005c\u005c(");
     String key = partes[0];

     if(componentname.contains("and")){
       contribui.put(key, "and");
     }
     else if(componentname.contains("or")){
       contribui.put(key, "or");
     }
     else if(componentname.contains("xor")){
       contribui.put(key, "xor");
     }
     else if(componentname.contains("inc-or")){
       contribui.put(key, "inc-or");
     }
     else if(componentname.contains("make")){
       contribui.put(key, "make");
     }
     else if(componentname.contains("help")){
       contribui.put(key, "help");
     }
     else if(componentname.contains("unknown")){
       contribui.put(key, "unknown");
     }
     else if(componentname.contains("hurt")){
       contribui.put(key, "hurt");
     }
     else if(componentname.contains("break")){
       contribui.put(key, "break");
     }else{
       contribui.put(key, "and");
     }
     softgoaldescricao.addElement(componentname);
     softgoalimage.addElement(componentname);
     filhosimage.addElement(componentname);
         componentname = (/*(String)taskimage.elementAt(0)+ "," +*/ descricao) ;
         softgoaldescricao.addElement(componentname);
         for (int i = 1; i < softgoalimage.size(); i++) {
              componentname +=(String)softgoalimage.elementAt(i); }
        }
          if(filhosimage.size()>0){
                for(int j=0; j<filhosimage.size(); j++){
                        String partesfilho[] = filhosimage.elementAt(j).split("\u005c\u005c(");
                    String key = partesfilho[0];
                    String partespai[] = componentesdescr.split("\u005c\u005c(");
                    value = partespai[0];
                        paishash.put(key, value);
                }
         }
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case GOAL_REF:
          case SOFTGOAL_REF:
          case TASK_REF:
          case 50:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_16;
          }
          joinpoint = joinpointcrosscutting(crosscutting);
          softgoalimage.addElement(joinpoint);
      softgoaldescricao.addElement(joinpoint);
      if(filhosimage.size()>0){
          paisderefhash.put(value, joinpoint);
      }
        }
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CORRELATION_REL:
          case CROSSCUTTING_REL:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_17;
          }
          relationship(componentname);
        }
          softgoalimage.addElement(joinpoint);
        tok = jj_consume_token(48);
          softgoaldescricao.addElement(tok.image);
         composicaovct.addElement(tok.image);
      }
      descricao = ((String)softgoaldescricao.elementAt(0));
         for (int i = 1; i < softgoaldescricao.size(); i++) {
            descricao +=(String)softgoaldescricao.elementAt(i);
         }
         jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     componentecompleto.addElement(descricao);
     String parentes = componentesdescr+"{";
     for (int i = 1; i < softgoalimage.size(); i++) {
           parentes +=(String)softgoalimage.elementAt(i);
     }
     filhosvct.addElement(parentes);
     {if (true) return parentes;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String goal(boolean cross) throws ParseException {
   SimpleNode jjtn000 = new SimpleNode(JJTGOAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   Token tok;
   String descricao= new String(), componentname = new String() ;
   java.util.Vector<String> goalimage = new java.util.Vector<String>();
   java.util.Vector<String> goaldescricao = new java.util.Vector<String>();
   java.util.Vector<String> filhosimage= new java.util.Vector<String>();
   java.util.Vector<String> goalpai= new java.util.Vector<String>();
   String retorno = new String();
   String painome = new String();
   String Key = new String("ID");
   String joinpoint = new String();
   boolean crosscutting = cross;
   String componentesdescr = new String();
   String topic=new String();
   String nome=new String();
   tpc= false;
   String comptcp = new String();
   String value = new String();
   boolean padrao = true;
    try {
      tok = jj_consume_token(GOAL);
          composicaovct.addElement("<br>" + tok.image+ " ");
         goaldescricao.addElement(tok.image + " ");
         goalpai.addElement(tok.image + " ");
      label_18:
      while (true) {
        nome = nomeComponente();
      composicaovct.addElement(nome);
     goalimage.addElement(nome);
     goaldescricao.addElement(nome);
     goalpai.addElement(nome);
     componentname="sem_filhos";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHABETIC:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_18;
        }
      }
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_19;
        }
        topic = topic();
          composicaovct.addElement(topic);
         goalimage.addElement(topic);
         goaldescricao.addElement(topic);
         goalpai.addElement(topic);
      }
      tok = jj_consume_token(50);
      composicaovct.addElement(tok.image);
     goaldescricao.addElement(tok.image);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case INCOR:
        case XOR:
        case BREAK:
        case HURT:
        case UNKNOWN:
        case HELP:
        case MAKE:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          tok = jj_consume_token(AND);
                  padrao = false;
          break;
        case OR:
          tok = jj_consume_token(OR);
                                               padrao = false;
          break;
        case XOR:
          tok = jj_consume_token(XOR);
                                                                             padrao = false;
          break;
        case INCOR:
          tok = jj_consume_token(INCOR);
                  padrao = false;
          break;
        case BREAK:
          tok = jj_consume_token(BREAK);
                                                  padrao = false;
          break;
        case HURT:
          tok = jj_consume_token(HURT);
                                                                                 padrao = false;
          break;
        case UNKNOWN:
          tok = jj_consume_token(UNKNOWN);
                    padrao = false;
          break;
        case HELP:
          tok = jj_consume_token(HELP);
                                                   padrao = false;
          break;
        case MAKE:
          tok = jj_consume_token(MAKE);
                                                                                  padrao = false;
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      if(padrao){
         contribui.put(nome, "and");
          }else{
                contribui.put(nome, tok.image);
          }
         composicaovct.addElement(tok.image);
        tok = jj_consume_token(49);
      goaldescricao.addElement(tok.image);
     composicaovct.addElement(tok.image);
      }
      tok = jj_consume_token(ALPHABETIC);
      goaldescricao.addElement(tok.image);
     composicaovct.addElement(tok.image);
      tok = jj_consume_token(49);
      goaldescricao.addElement(tok.image);
     composicaovct.addElement(tok.image);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_21;
        }
        tok = jj_consume_token(50);
      goaldescricao.addElement(tok.image);
     composicaovct.addElement(tok.image);
        tok = jj_consume_token(ALPHABETIC);
      goaldescricao.addElement(tok.image);
     composicaovct.addElement(tok.image);
        tok = jj_consume_token(51);
      goaldescricao.addElement(tok.image);
     composicaovct.addElement(tok.image);
        tok = jj_consume_token(49);
      goaldescricao.addElement(tok.image);
     composicaovct.addElement(tok.image);
        tok = jj_consume_token(50);
      goaldescricao.addElement(tok.image);
     composicaovct.addElement(tok.image);
        tok = jj_consume_token(ALPHABETIC);
      goaldescricao.addElement(tok.image);
     composicaovct.addElement(tok.image);
        tok = jj_consume_token(51);
      goaldescricao.addElement(tok.image);
     composicaovct.addElement(tok.image);
      }
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_22;
        }
        tok = jj_consume_token(51);
     goaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
    componentesdescr = ((String)goaldescricao.elementAt(0)) ;
        for (int i = 1; i < goaldescricao.size(); i++) {
          componentesdescr +=(String)goaldescricao.elementAt(i);
        }
        
      componentes.addElement(componentesdescr);
        
        if(tpc){
      comptcp= organizaComponentecomTopico(componentesdescr);
      componentestpcvct.addElement(comptcp);
    }
        tok = jj_consume_token(47);
     goaldescricao.addElement(tok.image);
    composicaovct.addElement(tok.image);
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROPERTY:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_23;
          }
          tok = jj_consume_token(PROPERTY);
                    composicaovct.addElement(tok.image);
    goalimage.addElement(tok.image);
          tok = jj_consume_token(47);
             composicaovct.addElement(tok.image);
    goalimage.addElement(tok.image);
          label_24:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ALPHABETIC:
              ;
              break;
            default:
              jj_la1[30] = jj_gen;
              break label_24;
            }
            tok = jj_consume_token(ALPHABETIC);
                      composicaovct.addElement(tok.image); goalimage.addElement(tok.image);
            tok = jj_consume_token(52);
             composicaovct.addElement(tok.image); goalimage.addElement(tok.image);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUMERO:
              tok = jj_consume_token(NUMERO);
                   composicaovct.addElement(tok.image); goalimage.addElement(tok.image);
              break;
            case ALPHABETIC:
              tok = jj_consume_token(ALPHABETIC);
                      composicaovct.addElement(tok.image); goalimage.addElement(tok.image);
              break;
            case 50:
              tok = jj_consume_token(50);
             composicaovct.addElement(tok.image); goalimage.addElement(tok.image);
              label_25:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SOFTGOAL:
                case GOAL:
                case TASK:
                case GOAL_REF:
                case SOFTGOAL_REF:
                case TASK_REF:
                  ;
                  break;
                default:
                  jj_la1[31] = jj_gen;
                  break label_25;
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case TASK:
                  tok = jj_consume_token(TASK);
                  composicaovct.addElement(tok.image+" "); goalimage.addElement(tok.image);
                  break;
                case GOAL:
                  tok = jj_consume_token(GOAL);
                composicaovct.addElement(tok.image+" "); goalimage.addElement(tok.image);
                  break;
                case SOFTGOAL:
                  tok = jj_consume_token(SOFTGOAL);
                    composicaovct.addElement(tok.image+" "); goalimage.addElement(tok.image);
                  break;
                case TASK_REF:
                  tok = jj_consume_token(TASK_REF);
                    composicaovct.addElement(tok.image+" "); goalimage.addElement(tok.image);
                  break;
                case GOAL_REF:
                  tok = jj_consume_token(GOAL_REF);
                    composicaovct.addElement(tok.image+" "); goalimage.addElement(tok.image);
                  break;
                case SOFTGOAL_REF:
                  tok = jj_consume_token(SOFTGOAL_REF);
                        composicaovct.addElement(tok.image+" "); goalimage.addElement(tok.image);
                  break;
                default:
                  jj_la1[32] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                nome = nomeComponente();
                                 composicaovct.addElement(nome); goalimage.addElement(nome);
                tok = jj_consume_token(53);
             composicaovct.addElement(tok.image); goalimage.addElement(tok.image);
              }
              tok = jj_consume_token(51);
             composicaovct.addElement(tok.image); goalimage.addElement(tok.image);
              break;
            default:
              jj_la1[33] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            tok = jj_consume_token(49);
             composicaovct.addElement(tok.image); goalimage.addElement(tok.image);
          }
          tok = jj_consume_token(48);
             composicaovct.addElement(tok.image); goalimage.addElement(tok.image);
        }
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SOFTGOAL:
          case GOAL:
          case TASK:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_26;
          }
          componentname = component(crosscutting);
      String partes[] = componentname.split("\u005c\u005c(");
     String key = partes[0];
     if(componentname.contains("and")){
       contribui.put(key, "and");
     }
     else if(componentname.contains("or")){
       contribui.put(key, "or");
     }
     else if(componentname.contains("xor")){
       contribui.put(key, "xor");
     }
     else if(componentname.contains("inc-or")){
       contribui.put(key, "inc-or");
     }
     else if(componentname.contains("make")){
       contribui.put(key, "make");
     }
         else if(componentname.contains("help")){
       contribui.put(key, "help");
     }
     else if(componentname.contains("unknown")){
       contribui.put(key, "unknown");
     }
     else if(componentname.contains("hurt")){
       contribui.put(key, "hurt");
     }
     else if(componentname.contains("break")){
       contribui.put(key, "break");
     }
     else{
     contribui.put(key, "and");
     }

     goaldescricao.addElement(componentname);
     goalimage.addElement(componentname);
     filhosimage.addElement(componentname);
         //componentname = (/*(String)taskimage.elementAt(0)+ "," +*/ descricao) ;
         goaldescricao.addElement(componentname);
         for (int i = 1; i < goalimage.size(); i++) {
              componentname +=(String)goalimage.elementAt(i);
         }
        }
          if(filhosimage.size()>0){
                for(int j=0; j<filhosimage.size(); j++){
                        String partesfilho[] = filhosimage.elementAt(j).split("\u005c\u005c(");
                    String key = partesfilho[0];
                    String partespai[] = componentesdescr.split("\u005c\u005c(");
                    value = partespai[0];
                        paishash.put(key, value);
                }
         }
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case GOAL_REF:
          case SOFTGOAL_REF:
          case TASK_REF:
          case 50:
            ;
            break;
          default:
            jj_la1[35] = jj_gen;
            break label_27;
          }
          joinpoint = joinpointcrosscutting(crosscutting);
      goalimage.addElement(joinpoint);
     goaldescricao.addElement(joinpoint);
     if(goalpai.size()>0){
         painome = ((String)goalpai.elementAt(0)) ;
         for (int i = 1; i < goalpai.size(); i++) {
              painome +=(String)goalpai.elementAt(i);
         }
         paisderefhash.put(painome, joinpoint);
     }
        }
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CORRELATION_REL:
          case CROSSCUTTING_REL:
            ;
            break;
          default:
            jj_la1[36] = jj_gen;
            break label_28;
          }
          relationship(componentname);
        }
        tok = jj_consume_token(48);
          composicaovct.addElement(tok.image);
         goaldescricao.addElement(tok.image);
      }
      descricao = ((String)goaldescricao.elementAt(0)) ;
            for (int i = 1; i < goaldescricao.size(); i++) {
                descricao +=(String)goaldescricao.elementAt(i);
            }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       componentecompleto.addElement(descricao);
       String parentes = componentesdescr + "{";
       for (int i = 1; i < goalimage.size(); i++) {
          parentes +=(String)goalimage.elementAt(i);
       }
       filhosvct.addElement(parentes);
       {if (true) return parentes;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String task(boolean cross) throws ParseException {
        SimpleNode jjtn000 = new SimpleNode(JJTTASK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token tok;
    String descricao= new String(), componentname = new String("sem_filhos") ;
    java.util.Vector<String> taskimage = new java.util.Vector<String>();
    java.util.Vector<String> filhosimage = new java.util.Vector<String>();
    java.util.Vector<String> taskdescricao = new java.util.Vector<String>();
    java.util.Vector<String> taskpai = new java.util.Vector<String>();
    String retorno = new String();
    String painome = new String();
    String componentesdescr = new String();
        String Key = new String("ID");
        boolean crosscutting = cross;
        String topic = new String();
        String nome = new String();
        String joinpoint = new String();
        String comptcp = new String();
        String value = new String();
        boolean padrao = true;
        tpc=false;
    try {
      tok = jj_consume_token(TASK);
         composicaovct.addElement("<br>" + tok.image + " " );
        taskdescricao.addElement(tok.image + " ");
        taskpai.addElement(tok.image + " ");
      label_29:
      while (true) {
        nome = nomeComponente();
    composicaovct.addElement(nome);
   taskimage.addElement(nome);
   taskdescricao.addElement(nome);
   taskpai.addElement(nome);
   componentname="sem_filhos";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHABETIC:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_29;
        }
      }
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_30;
        }
        topic = topic();
   composicaovct.addElement(topic);
  taskimage.addElement(topic);
  taskdescricao.addElement(topic);
  taskpai.addElement(topic);
      }
      tok = jj_consume_token(50);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case INCOR:
        case XOR:
        case BREAK:
        case HURT:
        case UNKNOWN:
        case HELP:
        case MAKE:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_31;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          tok = jj_consume_token(AND);
              padrao = false;
          break;
        case OR:
          tok = jj_consume_token(OR);
                                           padrao = false;
          break;
        case XOR:
          tok = jj_consume_token(XOR);
                                                                         padrao = false;
          break;
        case INCOR:
          tok = jj_consume_token(INCOR);
               padrao = false;
          break;
        case BREAK:
          tok = jj_consume_token(BREAK);
                                               padrao = false;
          break;
        case HURT:
          tok = jj_consume_token(HURT);
                                                                              padrao = false;
          break;
        case UNKNOWN:
          tok = jj_consume_token(UNKNOWN);
                 padrao = false;
          break;
        case HELP:
          tok = jj_consume_token(HELP);
                                                padrao = false;
          break;
        case MAKE:
          tok = jj_consume_token(MAKE);
                                                                               padrao = false;
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
   if(padrao){
     contribui.put(nome, "and");
   }else{
         contribui.put(nome, tok.image);
   }
   composicaovct.addElement(tok.image);
   taskdescricao.addElement(tok.image);
        tok = jj_consume_token(49);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
      }
      tok = jj_consume_token(ALPHABETIC);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
      tok = jj_consume_token(49);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_32;
        }
        tok = jj_consume_token(50);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
        tok = jj_consume_token(ALPHABETIC);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
        tok = jj_consume_token(51);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
        tok = jj_consume_token(49);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
        tok = jj_consume_token(50);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
        tok = jj_consume_token(ALPHABETIC);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
        tok = jj_consume_token(51);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
      }
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_33;
        }
        tok = jj_consume_token(51);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
  componentesdescr = ((String)taskdescricao.elementAt(0)) ;
  for (int i = 1; i < taskdescricao.size(); i++) {
         componentesdescr +=(String)taskdescricao.elementAt(i);
  }

  componentes.addElement(componentesdescr);

  if(tpc){
        comptcp=organizaComponentecomTopico(componentesdescr);
        componentestpcvct.addElement(comptcp);
  }
        tok = jj_consume_token(47);
   composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
        label_34:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROPERTY:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_34;
          }
          tok = jj_consume_token(PROPERTY);
                   taskimage.addElement(tok.image); composicaovct.addElement(tok.image);
          tok = jj_consume_token(47);
           taskimage.addElement(tok.image); composicaovct.addElement(tok.image);
          label_35:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ALPHABETIC:
              ;
              break;
            default:
              jj_la1[44] = jj_gen;
              break label_35;
            }
            tok = jj_consume_token(ALPHABETIC);
                     taskimage.addElement(tok.image); composicaovct.addElement(tok.image);
            tok = jj_consume_token(52);
           taskimage.addElement(tok.image); composicaovct.addElement(tok.image);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUMERO:
              tok = jj_consume_token(NUMERO);
                 composicaovct.addElement(tok.image);
              break;
            case ALPHABETIC:
              tok = jj_consume_token(ALPHABETIC);
                    taskimage.addElement(tok.image); composicaovct.addElement(tok.image);
              break;
            case 50:
              tok = jj_consume_token(50);
           taskimage.addElement(tok.image); composicaovct.addElement(tok.image);
              label_36:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SOFTGOAL:
                case GOAL:
                case TASK:
                case GOAL_REF:
                case SOFTGOAL_REF:
                case TASK_REF:
                  ;
                  break;
                default:
                  jj_la1[45] = jj_gen;
                  break label_36;
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case TASK:
                  tok = jj_consume_token(TASK);
                taskimage.addElement(tok.image); composicaovct.addElement(tok.image+" ");
                  break;
                case GOAL:
                  tok = jj_consume_token(GOAL);
              taskimage.addElement(tok.image); composicaovct.addElement(tok.image+" ");
                  break;
                case SOFTGOAL:
                  tok = jj_consume_token(SOFTGOAL);
                  taskimage.addElement(tok.image); composicaovct.addElement(tok.image+" ");
                  break;
                case TASK_REF:
                  tok = jj_consume_token(TASK_REF);
                  taskimage.addElement(tok.image); composicaovct.addElement(tok.image+" ");
                  break;
                case GOAL_REF:
                  tok = jj_consume_token(GOAL_REF);
                  taskimage.addElement(tok.image); composicaovct.addElement(tok.image+" ");
                  break;
                case SOFTGOAL_REF:
                  tok = jj_consume_token(SOFTGOAL_REF);
                      taskimage.addElement(tok.image); composicaovct.addElement(tok.image+" ");
                  break;
                default:
                  jj_la1[46] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                nome = nomeComponente();
                           taskimage.addElement(nome); composicaovct.addElement(nome);
                tok = jj_consume_token(53);
           taskimage.addElement(tok.image); composicaovct.addElement(tok.image);
              }
              tok = jj_consume_token(51);
           taskimage.addElement(tok.image); composicaovct.addElement(tok.image);
              break;
            default:
              jj_la1[47] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            tok = jj_consume_token(49);
           taskimage.addElement(tok.image); composicaovct.addElement(tok.image);
          }
          tok = jj_consume_token(48);
           taskimage.addElement(tok.image); composicaovct.addElement(tok.image);
        }
        label_37:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SOFTGOAL:
          case GOAL:
          case TASK:
            ;
            break;
          default:
            jj_la1[48] = jj_gen;
            break label_37;
          }
          componentname = component(crosscutting);
   String partes[] = componentname.split("\u005c\u005c(");
  String key = partes[0];
  if(componentname.contains("and")){
          contribui.put(key, "and");
  }
  else if(componentname.contains("or")){
          contribui.put(key, "or");
  }
  else if(componentname.contains("xor")){
          contribui.put(key, "xor");
  }
  else if(componentname.contains("inc-or")){
          contribui.put(key, "inc-or");
  }
  else if(componentname.contains("make")){
          contribui.put(key, "make");
  }
  else if(componentname.contains("help")){
          contribui.put(key, "help");
  }
  else if(componentname.contains("unknown")){
          contribui.put(key, "unknown");
  }
  else if(componentname.contains("hurt")){
          contribui.put(key, "hurt");
  }
   else if(componentname.contains("break")){
          contribui.put(key, "break");
  } else{
          contribui.put(key, "and");
  }
  taskdescricao.addElement(componentname);
  taskimage.addElement(componentname);
  filhosimage.addElement(componentname);
  componentname = (/*(String)taskimage.elementAt(0)+ "," +*/ descricao) ;
  taskdescricao.addElement(componentname);
  for (int i = 1; i < taskimage.size(); i++) {
          componentname +=(String)taskimage.elementAt(i);
  }
        }
   if(filhosimage.size()>0){
        for(int j=0; j<filhosimage.size(); j++){
          String partesfilho[] = filhosimage.elementAt(j).split("\u005c\u005c(");
          String key = partesfilho[0];
          String partespai[] = componentesdescr.split("\u005c\u005c(");
          value = partespai[0];
          paishash.put(key, value);
        }
  }
        label_38:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case GOAL_REF:
          case SOFTGOAL_REF:
          case TASK_REF:
          case 50:
            ;
            break;
          default:
            jj_la1[49] = jj_gen;
            break label_38;
          }
          joinpoint = joinpointcrosscutting(crosscutting);
   taskimage.addElement(joinpoint);
  taskdescricao.addElement(joinpoint);
  if(taskpai.size()>0){
         painome = ((String)taskpai.elementAt(0)) ;
         for (int i = 1; i < taskpai.size(); i++) {
                  painome +=(String)taskpai.elementAt(i);
         }
         paisderefhash.put(painome, joinpoint);
  }
        }
        label_39:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CORRELATION_REL:
          case CROSSCUTTING_REL:
            ;
            break;
          default:
            jj_la1[50] = jj_gen;
            break label_39;
          }
          relationship(componentname);
        }
        tok = jj_consume_token(48);
   taskimage.addElement(tok.image);
  composicaovct.addElement(tok.image);
  taskdescricao.addElement(tok.image);
      }
   descricao = ((String)taskdescricao.elementAt(0)) ;
        for (int i = 1; i < taskdescricao.size(); i++) {
            descricao +=(String)taskdescricao.elementAt(i);
        }
        jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    componentecompleto.addElement(descricao);
    String parentes = componentesdescr+"{";
    for (int i = 1; i < taskimage.size(); i++) {
       parentes +=(String)taskimage.elementAt(i);
    }
    filhosvct.addElement(parentes);
    {if (true) return parentes;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String organizaComponentecomTopico(String componentesdescr) throws ParseException {
  java.util.Vector<String> componentevct = new java.util.Vector<String>();
  java.util.Vector<String> retornovct = new java.util.Vector<String>();
  String semComp = new String();
  String comTopico = new String();
    String partes2[] = componentesdescr.split("\u005c\u005c(");
   comTopico = partes2[0];
   {if (true) return comTopico;}
    throw new Error("Missing return statement in function");
  }

  static final public String nomeComponente() throws ParseException {
SimpleNode jjtn000 = new SimpleNode(JJTNOMECOMPONENTE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token tok = new Token();
Vector<String> nomesvct = new Vector<String> ();
String descr = new String();
String topic = new String();
boolean tpc = false;
    try {
      label_40:
      while (true) {
        tok = jj_consume_token(ALPHABETIC);
      nomesvct.addElement(tok.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHABETIC:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_40;
        }
      }
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_41;
        }
        topic = topic();
          nomesvct.addElement(topic);
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     for (int i = 0; i < nomesvct.size(); i++) {
        if(i>0)
                descr +=" ";
            descr +=(String)nomesvct.elementAt(i);
         }
         {if (true) return descr;}
    } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String topic() throws ParseException {
SimpleNode jjtn000 = new SimpleNode(JJTTOPIC);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token tok = new Token();
Vector<String> topicvct = new Vector<String> ();
String topicdescr = new String();
String nome = new String();
tpc = true;
    try {
      tok = jj_consume_token(54);
      topicvct.addElement(tok.image);
      label_42:
      while (true) {
        tok = jj_consume_token(ALPHABETIC);
      topicvct.addElement(tok.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHABETIC:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_42;
        }
      }
      tok = jj_consume_token(55);
      topicvct.addElement(tok.image);
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHABETIC:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_43;
        }
        nome = nomeComponente();
      topicvct.addElement(" "+nome);
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     for (int i = 0; i < topicvct.size(); i++) {
    	 if(i>1 && !topicvct.elementAt(i).equals("]"))
         	topicdescr +=" ";
         topicdescr +=(String)topicvct.elementAt(i);
     }
         {if (true) return topicdescr;}
    } catch (Throwable jjte000) {
         if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte000;}
         }
         if (jjte000 instanceof ParseException) {
           {if (true) throw (ParseException)jjte000;}
         }
         {if (true) throw (Error)jjte000;}
    } finally {
         if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String relationship(String components) throws ParseException {
    SimpleNode jjtn000 = new SimpleNode(JJTRELATIONSHIP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);//System.out.println("relationship ");
    String x="init";String s, componentsdescricao=components;
    java.util.Vector relationshipimage = new java.util.Vector();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CORRELATION_REL:
        label_44:
        while (true) {
          x = correlation_rel();
          relationshipimage.addElement(x);
         s = (String)relationshipimage.elementAt(0);
         for (int i = 1; i < relationshipimage.size(); i++) {
              s += " " + (String)relationshipimage.elementAt(i);
         }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CORRELATION_REL:
            ;
            break;
          default:
            jj_la1[55] = jj_gen;
            break label_44;
          }
        }
        break;
      case CROSSCUTTING_REL:
        label_45:
        while (true) {
          x = crosscutting_rel(componentsdescricao);
         relationshipimage.addElement(x);
        s = (String)relationshipimage.elementAt(0);
        for (int i = 1; i < relationshipimage.size(); i++) {
           s += " " + (String)relationshipimage.elementAt(i);
        }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CROSSCUTTING_REL:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_45;
          }
        }
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       {if (true) return s;}
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String correlation_rel() throws ParseException {
   SimpleNode jjtn000 = new SimpleNode(JJTCORRELATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);//System.out.println("correlation_rel ");
   Token tok;
   String x="init", teste="init";
   java.util.Vector correlationimage = new java.util.Vector();
   boolean crosscutting = true;
   boolean opera = true;
    try {
      tok = jj_consume_token(CORRELATION_REL);
                               composicaovct.addElement(tok.image);
      tok = jj_consume_token(50);
                 composicaovct.addElement(tok.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
        tok = jj_consume_token(BREAK);
        break;
      case HURT:
        tok = jj_consume_token(HURT);
        break;
      case UNKNOWN:
        tok = jj_consume_token(UNKNOWN);
        break;
      case HELP:
        tok = jj_consume_token(HELP);
        break;
      case MAKE:
        tok = jj_consume_token(MAKE);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
         composicaovct.addElement(tok.image);
      tok = jj_consume_token(51);
                 composicaovct.addElement(tok.image);
      tok = jj_consume_token(47);
                 composicaovct.addElement(tok.image);
      tok = jj_consume_token(SOURCE);
                      composicaovct.addElement(tok.image);
      tok = jj_consume_token(52);
                 composicaovct.addElement(tok.image);
      x = joinpoint(crosscutting, opera);
         correlationimage.addElement(x);
      tok = jj_consume_token(TARGET);
                      composicaovct.addElement(tok.image);
      tok = jj_consume_token(52);
                 composicaovct.addElement(tok.image);
      x = joinpoint(crosscutting, opera);
      tok = jj_consume_token(48);
                 composicaovct.addElement(tok.image);
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       {if (true) return x;}
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String crosscutting_rel(String w) throws ParseException {
  SimpleNode jjtn000 = new SimpleNode(JJTCROSSCUTTING_REL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);//System.out.println("crosscutting_rel ");
  String x="init", origem = new String(""), adviceAtual = new String(), pointcut=new String(),
  intertypedeclaration, intertype= new String(), advice="init", componentsdescricao=w;
  java.util.Vector crosscuttingimage = new java.util.Vector();
  java.util.Vector pointcutimage = new java.util.Vector();
  Token tok;
    try {
      tok = jj_consume_token(CROSSCUTTING_REL);
                                composicaovct.addElement(tok.image);
      tok = jj_consume_token(50);
                 composicaovct.addElement(tok.image);
      tok = jj_consume_token(SOURCE);
                      composicaovct.addElement(tok.image);
      tok = jj_consume_token(52);
                 composicaovct.addElement(tok.image);
      x = nomeComponente();
         composicaovct.addElement(x);
        crosscuttingimage.addElement(x);
      label_46:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_46;
        }
        x = topic();
         composicaovct.addElement(x);
        crosscuttingimage.addElement(x);
      }
      tok = jj_consume_token(50);
                 composicaovct.addElement(tok.image);
      tok = jj_consume_token(ALPHABETIC);
                          origem="origem" + tok.image; composicaovct.addElement(tok.image);
      tok = jj_consume_token(51);
                 composicaovct.addElement(tok.image);
      tok = jj_consume_token(51);
                 composicaovct.addElement(tok.image);
      tok = jj_consume_token(47);
                 composicaovct.addElement(tok.image);
      label_47:
      while (true) {
        pointcut = pointcut();
         pointcutimage.addElement(pointcut);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POINTCUT:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_47;
        }
      }
     advice = (String)pointcutimage.elementAt(0);
        for (int i = 1; i < pointcutimage.size(); i++) {
           advice += "," + (String)pointcutimage.elementAt(i);
        }
      label_48:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADVICE:
        case INTERTYPE:
        case ALPHABETIC:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_48;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADVICE:
          label_49:
          while (true) {
            adviceAtual = advice();
         advicevct.addElement(advice+"/"+adviceAtual);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ADVICE:
              ;
              break;
            default:
              jj_la1[62] = jj_gen;
              break label_49;
            }
          }
          break;
        case INTERTYPE:
        case ALPHABETIC:
          label_50:
          while (true) {
            intertypedeclaration = intertype_declaration();
         intertype = (String)pointcutimage.elementAt(0);
        for (int i = 1; i < pointcutimage.size(); i++) {
           intertype += "+" + origem + "," + (String)pointcutimage.elementAt(i);
        }
        if(pointcutimage.size()==1){
       intertype += origem;
    }
         intertypedeclarationvct.addElement(intertype+"/"+intertypedeclaration);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTERTYPE:
            case ALPHABETIC:
              ;
              break;
            default:
              jj_la1[63] = jj_gen;
              break label_50;
            }
          }
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      tok = jj_consume_token(48);
                 composicaovct.addElement(tok.image);
      label_51:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CORRELATION_REL:
        case CROSSCUTTING_REL:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_51;
        }
        x = relationship(advice+","+intertype);
         crosscuttingimage.addElement(x);
      }
         x = (String)crosscuttingimage.elementAt(0);
        for (int i = 1; i < crosscuttingimage.size(); i++) {
           x += " " + (String)crosscuttingimage.elementAt(i);
        }
        jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return x;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
      } else {
         jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String pointcut() throws ParseException {
        SimpleNode jjtn000 = new SimpleNode(JJTPOINTCUT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    java.util.Vector pointcutafetados = new java.util.Vector();
        Token tok;
        String x = new String();
        String y, w;
        String nome = new String();
        String id = new String();
    try {
      tok = jj_consume_token(POINTCUT);
                        composicaovct.addElement(tok.image);
      tok = jj_consume_token(50);
                 composicaovct.addElement(tok.image);
      if (jj_2_1(2)) {
        tok = jj_consume_token(ALPHABETIC);
                            nome = tok.image;
         composicaovct.addElement(tok.image);
        tok = jj_consume_token(49);
                 composicaovct.addElement(tok.image);
      } else {
        ;
      }
      tok = jj_consume_token(ALPHABETIC);
         id= tok.image;
        composicaovct.addElement(tok.image);
        x=tok.image;
        pointcuts.addElement(new Pointcut(nome, id));
      tok = jj_consume_token(51);
                 composicaovct.addElement(tok.image);
      tok = jj_consume_token(56);
                 composicaovct.addElement(tok.image);
      y = pointcut_expression(id);
         pointcutafetados.addElement(x + y);
        w = (String)pointcutafetados.elementAt(0);
        for (int i = 1; i < pointcutafetados.size(); i++) {
           w +=(String)pointcutafetados.elementAt(i);
        }
        jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    /*if(pointcuts.size()<0){
		for(int i = 0; i<pointcuts.size(); i++){
			System.out.println("POINTCUT: " + pointcuts.elementAt(i).getNome());
		}
	}*/
        {if (true) return w;}
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String pointcut_expression(String pointcutatual) throws ParseException {
   SimpleNode jjtn000 = new SimpleNode(JJTPOINTCUT_EXPRESSION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);//System.out.println("pointcut_exp ");
   String operando="init", operandostr = new String(), andstrn = new String(), orstrn = new String(), oper = new String();
   String componenteAfetado=new String();
   java.util.Vector operands = new java.util.Vector();
   java.util.Vector and = new java.util.Vector();
   java.util.Vector or = new java.util.Vector();
   java.util.Vector operandovct = new java.util.Vector();
   Token tok;
    try {
      label_52:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCLUDE:
        case SUBSTITUTE:
        case NOT:
          ;
          break;
        default:
          jj_la1[66] = jj_gen;
          break label_52;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCLUDE:
        case SUBSTITUTE:
          operando = operand(pointcutatual);
     operandovct.addElement(operando);
          break;
        case NOT:
          tok = jj_consume_token(NOT);
          operand(pointcutatual);
         composicaovct.addElement(tok.image + " ");
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_53:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_53;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          tok = jj_consume_token(AND);
         if(pointcuts.size()>0){
                for(int i = 0; i<pointcuts.size(); i++){
                        if(pointcuts.elementAt(i).getIdentificador().equals(pointcutatual)){
                                pointcuts.elementAt(i).setOperadores(tok.image);
                        }
                }
        }
        operandovct.addElement("*");
    composicaovct.addElement(tok.image + " ");
    and.addElement(operando+"+");
    operando = operand(pointcutatual);
    operandovct.addElement(operando);
          break;
        case OR:
          tok = jj_consume_token(OR);
         if(pointcuts.size()>0){
                for(int i = 0; i<pointcuts.size(); i++){
                        if(pointcuts.elementAt(i).getIdentificador().equals(pointcutatual)){
                                pointcuts.elementAt(i).setOperadores(tok.image);
                        }
                }
        }
        composicaovct.addElement(tok.image + " "); or.addElement(operando); operandovct.addElement("+");
    operando = operand(pointcutatual);
    operandovct.addElement(operando);
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
         if(operandovct.size() > 0){
        //operandostr = ((String)operandovct.elementAt(0)) ;
        for (int i = 0; i < operandovct.size(); i++) {
                operandostr +=(String)operandovct.elementAt(i);
        }
        operando = operandostr;
    }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return "-" + operando;}
    } catch (Throwable jjte000) {
                if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
        } else {
            jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String operand(String pointcutatual) throws ParseException {
        String operand = new String();
        SimpleNode jjtn000 = new SimpleNode(JJTOPERAND);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    String x="init";
        java.util.Vector operandimage = new java.util.Vector();
        Token tok;
        boolean crosscutting = true;
        boolean op = false;
        String operand2 = new String();
        String afetado = new String();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        tok = jj_consume_token(INCLUDE);
         composicaovct.addElement(tok.image);
        operand2=tok.image;
        break;
      case SUBSTITUTE:
        tok = jj_consume_token(SUBSTITUTE);
         operand="~" + tok.image;
        operand2=tok.image;
        operand="~" +tok.image;
        substitutevct.addElement(pointcutatual);
        composicaovct.addElement(tok.image);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      x = joinpoint(crosscutting, op);
         afetado = x;
        operandimage.addElement(x + operand);
        x = (String)operandimage.elementAt(0);
        for (int i = 1; i < operandimage.size(); i++) {
              x += " " + (String)operandimage.elementAt(i);
        }
        jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(pointcuts.size()<0){
                for(int i = 0; i<pointcuts.size(); i++){
                        if(pointcuts.elementAt(i).getIdentificador().equals(pointcutatual)){
                                pointcuts.elementAt(i).setIDafetado(afetado, operand2);
                        }
                }
        }
        {if (true) return x + operand;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
      } else {
         jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void regular_expression() throws ParseException {
  SimpleNode jjtn000 = new SimpleNode(JJTREGULAR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(57);
    } finally {
      if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public String advice() throws ParseException {
   SimpleNode jjtn000 = new SimpleNode(JJTADVICE);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);//System.out.println("advice ");
   String /*afetado=y, componentsdescricao=z, */around, joinpointcutstr, joinpointcrosscutting, pointcutID, advice=new String();
   java.util.Vector joinpointcut = new java.util.Vector();
   Token token;
   boolean crosscutting = true;
   java.util.Vector<String> aux2 = new java.util.Vector<String>();
    try {
      token = jj_consume_token(ADVICE);
                     composicaovct.addElement(token.image);
      token = jj_consume_token(50);
                composicaovct.addElement(token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AFTER:
        token = jj_consume_token(AFTER);
                     advice=token.image; composicaovct.addElement(token.image);
        break;
      case BEFORE:
        token = jj_consume_token(BEFORE);
                     advice=token.image; composicaovct.addElement(token.image);
        break;
      case AROUND:
        token = jj_consume_token(AROUND);
                     advice=token.image; composicaovct.addElement(token.image);
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      token = jj_consume_token(51);
                composicaovct.addElement(token.image);
      token = jj_consume_token(56);
                composicaovct.addElement(token.image);
      pointcutID = a_it_expression();
      if(pointcutID.contains("+")){
                java.util.StringTokenizer aux1 = new java.util.StringTokenizer(pointcutID, "+");
                while (aux1.hasMoreTokens())   {
                        aux2.addElement(aux1.nextToken());
                }
         }else{
                aux2.addElement(pointcutID);
         }
      token = jj_consume_token(47);
                composicaovct.addElement(token.image);
      joinpointcrosscutting = joinpointcrosscutting(crosscutting);
          if(aux2.size()>0){
          for(int j=0; j<aux2.size();j++){
                 if(pointcuts.size()>0){
                        for(int i =0; i<pointcuts.size(); i++){
                                if(pointcuts.elementAt(i).getIdentificador().equals(aux2.elementAt(j))){
                                        if(advice.equals("around")){
                                                pointcuts.elementAt(i).setAdvicearound(joinpointcrosscutting);
                                        }
                                if(advice.equals("after")){
                                                pointcuts.elementAt(i).setAdviceafter(joinpointcrosscutting);
                                        }
                                if(advice.equals("before")){
                                                pointcuts.elementAt(i).setAdvicebefore(joinpointcrosscutting);
                                        }
                                }
                        }
                 }
          }
        }

        joinpointcut.addElement(pointcutID + "-" + joinpointcrosscutting);
        joinpointcutstr = (String)joinpointcut.elementAt(0);
        for (int i = 1; i < joinpointcut.size(); i++) {
            joinpointcutstr += " " + (String)joinpointcut.elementAt(i);
        }
      token = jj_consume_token(48);
     composicaovct.addElement(token.image);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return joinpointcutstr +"<"+advice;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String joinpoint(boolean cross, boolean oper) throws ParseException {
        SimpleNode jjtn000 = new SimpleNode(JJTJOINPOINT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);//System.out.println("joinpoint ");
    Token tok;
        java.util.Vector joinpointimage = new java.util.Vector();
        String x, y, componente = new String();
        boolean crosscuting = cross;
        boolean opera = oper;
        String nome = new String();
        String topic = new String();
    try {
      label_54:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GOAL_REF:
        case SOFTGOAL_REF:
        case TASK_REF:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_54;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GOAL_REF:
          tok = jj_consume_token(GOAL_REF);
                          componente = "goal "; composicaovct.addElement(tok.image);
          break;
        case SOFTGOAL_REF:
          tok = jj_consume_token(SOFTGOAL_REF);
                            componente = "softgoal "; composicaovct.addElement(tok.image);
          break;
        case TASK_REF:
          tok = jj_consume_token(TASK_REF);
                        componente = "task "; composicaovct.addElement(tok.image);
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        tok = jj_consume_token(52);
                 composicaovct.addElement(tok.image);
      }
      tok = jj_consume_token(50);
             composicaovct.addElement(tok.image);
      label_55:
      while (true) {
        nome = nomeComponente();
         if(opera){
          referencias.addElement(componente + nome);
        }
    composicaovct.addElement(nome);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHABETIC:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_55;
        }
      }
      label_56:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_56;
        }
        topic = topic();
         if(opera){
          referencias.addElement(componente + topic);
        }
    composicaovct.addElement(topic);
      }
      tok = jj_consume_token(49);
                 composicaovct.addElement(tok.image);
      tok = jj_consume_token(ALPHABETIC);
                          composicaovct.addElement(tok.image); joinpointimage.addElement(tok.image); y=tok.image;
      tok = jj_consume_token(49);
                 composicaovct.addElement(tok.image);
      label_57:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case INCOR:
        case XOR:
        case BREAK:
        case HURT:
        case UNKNOWN:
        case HELP:
        case MAKE:
          ;
          break;
        default:
          jj_la1[76] = jj_gen;
          break label_57;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          tok = jj_consume_token(AND);
          break;
        case OR:
          tok = jj_consume_token(OR);
          break;
        case XOR:
          tok = jj_consume_token(XOR);
          break;
        case INCOR:
          tok = jj_consume_token(INCOR);
          break;
        case BREAK:
          tok = jj_consume_token(BREAK);
          break;
        case HURT:
          tok = jj_consume_token(HURT);
          break;
        case UNKNOWN:
          tok = jj_consume_token(UNKNOWN);
          break;
        case HELP:
          tok = jj_consume_token(HELP);
          break;
        case MAKE:
          tok = jj_consume_token(MAKE);
          break;
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         composicaovct.addElement(tok.image);
        tok = jj_consume_token(49);
                 composicaovct.addElement(tok.image);
      }
      tok = jj_consume_token(51);
                 composicaovct.addElement(tok.image);
      label_58:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROPERTY:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_58;
        }
        tok = jj_consume_token(PROPERTY);
                     composicaovct.addElement(tok.image);
        tok = jj_consume_token(47);
                 composicaovct.addElement(tok.image);
        label_59:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALPHABETIC:
            ;
            break;
          default:
            jj_la1[79] = jj_gen;
            break label_59;
          }
          tok = jj_consume_token(ALPHABETIC);
                           composicaovct.addElement(tok.image);
          tok = jj_consume_token(52);
                 composicaovct.addElement(tok.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMERO:
            tok = jj_consume_token(NUMERO);
                       composicaovct.addElement(tok.image);
            break;
          case ALPHABETIC:
            tok = jj_consume_token(ALPHABETIC);
                          composicaovct.addElement(tok.image);
            break;
          default:
            jj_la1[80] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          tok = jj_consume_token(49);
             composicaovct.addElement(tok.image);
        }
        tok = jj_consume_token(48);
             composicaovct.addElement(tok.image);
      }
         x = (String)joinpointimage.elementAt(0);
        for (int i = 1; i < joinpointimage.size(); i++) {
           x += " " + (String)joinpointimage.elementAt(i);
        }
      label_60:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GOAL_REF:
        case SOFTGOAL_REF:
        case TASK_REF:
        case 50:
          ;
          break;
        default:
          jj_la1[81] = jj_gen;
          break label_60;
        }
        joinpoint(crosscuting, opera);
      }
      label_61:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOFTGOAL:
        case GOAL:
        case TASK:
          ;
          break;
        default:
          jj_la1[82] = jj_gen;
          break label_61;
        }
        component(crosscuting);
      }
          jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return y;}
    } catch (Throwable jjte000) {
       if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
       } else {
          jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String joinpointcrosscutting(boolean cross) throws ParseException {
        SimpleNode jjtn000 = new SimpleNode(JJTJOINPOINTCROSSCUTTING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);//System.out.println("joinpointcross ");
    Token tok;
        String joinpointcrosscuttingstr = new String();
        java.util.Vector<String> joinpointimage = new java.util.Vector<String>();
        String x, y, componente = new String();
        boolean crosscutting = true;
        String nomeComp=new String();
        String topic=new String();
        boolean opera = true;
    try {
      label_62:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GOAL_REF:
        case SOFTGOAL_REF:
        case TASK_REF:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_62;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GOAL_REF:
          tok = jj_consume_token(GOAL_REF);
                          componente = "goal "; composicaovct.addElement(tok.image); joinpointimage.addElement("goal_ref");
          break;
        case SOFTGOAL_REF:
          tok = jj_consume_token(SOFTGOAL_REF);
                             componente = "softgoal ";composicaovct.addElement(tok.image); joinpointimage.addElement("softgoal_ref");
          break;
        case TASK_REF:
          tok = jj_consume_token(TASK_REF);
                         componente = "task "; composicaovct.addElement(tok.image); joinpointimage.addElement("task_ref");
          break;
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        tok = jj_consume_token(52);
                  composicaovct.addElement(tok.image); joinpointimage.addElement(tok.image);
      }
      tok = jj_consume_token(50);
                  composicaovct.addElement(tok.image); joinpointimage.addElement(tok.image);
      nomeComp = nomeComponente();
                                    referencias.addElement(componente + nomeComp);
         composicaovct.addElement(nomeComp); joinpointimage.addElement(nomeComp);
      label_63:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[85] = jj_gen;
          break label_63;
        }
        topic = topic();
                         referencias.addElement(componente + nomeComp + topic);
         composicaovct.addElement(topic); joinpointimage.addElement(topic);
      }
      tok = jj_consume_token(49);
                    composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
      tok = jj_consume_token(ALPHABETIC);
                             composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
      tok = jj_consume_token(49);
                    composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
      label_64:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case INCOR:
        case XOR:
        case BREAK:
        case HURT:
        case UNKNOWN:
        case HELP:
        case MAKE:
          ;
          break;
        default:
          jj_la1[86] = jj_gen;
          break label_64;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          tok = jj_consume_token(AND);
          break;
        case OR:
          tok = jj_consume_token(OR);
          break;
        case XOR:
          tok = jj_consume_token(XOR);
          break;
        case INCOR:
          tok = jj_consume_token(INCOR);
          break;
        case BREAK:
          tok = jj_consume_token(BREAK);
          break;
        case HELP:
          tok = jj_consume_token(HELP);
          break;
        case MAKE:
          tok = jj_consume_token(MAKE);
          break;
        case HURT:
          tok = jj_consume_token(HURT);
          break;
        case UNKNOWN:
          tok = jj_consume_token(UNKNOWN);
          break;
        default:
          jj_la1[87] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          composicaovct.addElement(tok.image); joinpointimage.addElement(tok.image);
        tok = jj_consume_token(49);
                   composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
      }
      tok = jj_consume_token(51);
                   composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
      label_65:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROPERTY:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_65;
        }
        tok = jj_consume_token(PROPERTY);
                          composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
        tok = jj_consume_token(47);
                  composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
        label_66:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALPHABETIC:
            ;
            break;
          default:
            jj_la1[89] = jj_gen;
            break label_66;
          }
          tok = jj_consume_token(ALPHABETIC);
                            composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
          tok = jj_consume_token(52);
                  composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMERO:
            tok = jj_consume_token(NUMERO);
                        composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
            break;
          case ALPHABETIC:
            tok = jj_consume_token(ALPHABETIC);
                           composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
            break;
          default:
            jj_la1[90] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          tok = jj_consume_token(49);
              composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
        }
        tok = jj_consume_token(48);
              composicaovct.addElement(tok.image);joinpointimage.addElement(tok.image);
      }
      label_67:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GOAL_REF:
        case SOFTGOAL_REF:
        case TASK_REF:
        case 50:
          ;
          break;
        default:
          jj_la1[91] = jj_gen;
          break label_67;
        }
        joinpointcrosscuttingstr = joinpointcrosscutting(crosscutting);
          joinpointimage.addElement(joinpointcrosscuttingstr);
      }
      label_68:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOFTGOAL:
        case GOAL:
        case TASK:
          ;
          break;
        default:
          jj_la1[92] = jj_gen;
          break label_68;
        }
        component(crosscutting);
      }
           x = (String)joinpointimage.elementAt(0);
     for (int i = 1; i < joinpointimage.size(); i++) {
        x +=(String)joinpointimage.elementAt(i);
     }
      label_69:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GOAL_REF:
        case SOFTGOAL_REF:
        case TASK_REF:
        case 50:
          ;
          break;
        default:
          jj_la1[93] = jj_gen;
          break label_69;
        }
        joinpoint(crosscutting, opera);
      }
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           {if (true) return x;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String a_it_expression() throws ParseException {
        SimpleNode jjtn000 = new SimpleNode(JJTA_IT_EXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);//System.out.println("a_it_expression ");
    java.util.Vector pointcuts = new java.util.Vector();
        String pointcutID="inicializada";
        Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHABETIC:
        token = jj_consume_token(ALPHABETIC);
                             pointcuts.addElement(token.image);
        break;
      case NOT:
        token = jj_consume_token(NOT);
                       composicaovct.addElement(token.image);
        token = jj_consume_token(ALPHABETIC);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
         composicaovct.addElement(token.image);
      label_70:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[95] = jj_gen;
          break label_70;
        }
        token = jj_consume_token(AND);
                      composicaovct.addElement(" " + token.image + " ");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHABETIC:
          token = jj_consume_token(ALPHABETIC);
                             composicaovct.addElement(token.image); pointcuts.addElement(token.image);
          break;
        case NOT:
          token = jj_consume_token(NOT);
                       composicaovct.addElement(token.image);
          token = jj_consume_token(ALPHABETIC);
                                                                                   composicaovct.addElement(token.image);
          break;
        default:
          jj_la1[96] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_71:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[97] = jj_gen;
          break label_71;
        }
        token = jj_consume_token(OR);
                     composicaovct.addElement(token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHABETIC:
          token = jj_consume_token(ALPHABETIC);
                             composicaovct.addElement(token.image);
          break;
        case NOT:
          token = jj_consume_token(NOT);
                     composicaovct.addElement(token.image);
          token = jj_consume_token(ALPHABETIC);
                                                                                 composicaovct.addElement(token.image);
          break;
        default:
          jj_la1[98] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
         if(pointcuts.size() > 0){
        pointcutID = ((String)pointcuts.elementAt(0)) ;
        for (int i = 1; i < pointcuts.size(); i++) {
            pointcutID += "+" + (String)pointcuts.elementAt(i);
        }
    }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return pointcutID;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String intertype_declaration() throws ParseException {
        SimpleNode jjtn000 = new SimpleNode(JJTINTERTYPE_DECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);// System.out.println("intertype_declaration ");
    java.util.Vector componenteAdicionado = new java.util.Vector();
        Token tok;
        String componente = new String();
        String pointcut = new String();
        String joinpoint = new String();
        String valor = new String("vazia");
        boolean crosscutting = true;
        String nome=new String();
        boolean opera = true;
        java.util.Vector<String> aux2 = new java.util.Vector<String>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTERTYPE:
        tok = jj_consume_token(INTERTYPE);
                          composicaovct.addElement(tok.image);
        tok = jj_consume_token(50);
                  composicaovct.addElement(tok.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTRIBUTE:
          tok = jj_consume_token(ATTRIBUTE);
                           composicaovct.addElement(tok.image);
          break;
        case ELEMENT:
          tok = jj_consume_token(ELEMENT);
                                                                                  composicaovct.addElement(tok.image);
          break;
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        tok = jj_consume_token(51);
                  composicaovct.addElement(tok.image);
        tok = jj_consume_token(56);
                  composicaovct.addElement(tok.image);
        pointcut = a_it_expression();
          if(pointcut.contains("+")){
                java.util.StringTokenizer aux1 = new java.util.StringTokenizer(pointcut, "+");
        while (aux1.hasMoreTokens()){
             aux2.addElement(aux1.nextToken());
        }
     }else{
                aux2.addElement(pointcut);
         }
        tok = jj_consume_token(47);
                 composicaovct.addElement(tok.image);
        label_72:
        while (true) {
          label_73:
          while (true) {
            componente = component(crosscutting);
     if(aux2.size()>0){
       for(int j=0; j<aux2.size();j++){
          if(pointcuts.size()>0){
             for(int i =0; i<pointcuts.size(); i++){
                if(pointcuts.elementAt(i).getIdentificador().equals(aux2.elementAt(j))){
                           pointcuts.elementAt(i).setIntertype(componente);
                }
             }
          }
       }
    }

    verificaIntertypevct.addElement(componente) ;
    componenteAdicionado.addElement(componente);
    intertypePointcutsvct.addElement(pointcut);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SOFTGOAL:
            case GOAL:
            case TASK:
              ;
              break;
            default:
              jj_la1[100] = jj_gen;
              break label_73;
            }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SOFTGOAL:
          case GOAL:
          case TASK:
            ;
            break;
          default:
            jj_la1[101] = jj_gen;
            break label_72;
          }
        }
        break;
      case ALPHABETIC:
        tok = jj_consume_token(ALPHABETIC);
                              composicaovct.addElement(tok.image);valor=tok.image;
        jj_consume_token(52);
             composicaovct.addElement(tok.image);
        nome = nomeComponente();
                           composicaovct.addElement(nome);valor = "{ " + valor+ "=" + nome + "; }";
        jj_consume_token(49);
     if(aux2.size()>0){
       if(!valor.equals("vazia")){
          for(int j=0; j<aux2.size();j++){
            if(pointcuts.size()>0){
               for(int i =0; i<pointcuts.size(); i++){
                          if(pointcuts.elementAt(i).getIdentificador().equals(aux2.elementAt(j))){
                                 pointcuts.elementAt(i).setIntertype(valor);
                          }
                   }
                }
          }
       }
    }
        tok = jj_consume_token(48);
     composicaovct.addElement(tok.image);
        if(componenteAdicionado.size() > 0){
           componente = ((String)componenteAdicionado.elementAt(0)) ;
           for (int i = 1; i < componenteAdicionado.size(); i++) {
              componente += " " + (String)componenteAdicionado.elementAt(i);
           }
        }
        jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        {if (true) return pointcut + "-" + componente + " " + joinpoint + " " + valor;}
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ALPHABETIC)) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public aovgraphTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[103];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x21,0x0,0x0,0xe380,0x380,0x10400,0xe380,0x380,0x0,0x0,0xfe000000,0xfe000000,0x0,0x0,0x1000000,0x0,0xe380,0xe380,0x0,0x380,0xe000,0x10400,0x0,0x0,0xfe000000,0xfe000000,0x0,0x0,0x1000000,0x0,0xe380,0xe380,0x0,0x380,0xe000,0x10400,0x0,0x0,0xfe000000,0xfe000000,0x0,0x0,0x1000000,0x0,0xe380,0xe380,0x0,0x380,0xe000,0x10400,0x0,0x0,0x0,0x0,0x400,0x10000,0x10400,0xe0000000,0x0,0x20000,0x300000,0x100000,0x200000,0x300000,0x10400,0xc0000,0xc0000,0x6000000,0x6000000,0xc0000,0x0,0xe000,0xe000,0x0,0x0,0xfe000000,0xfe000000,0x1000000,0x0,0x0,0xe000,0x380,0xe000,0xe000,0x0,0xfe000000,0xfe000000,0x1000000,0x0,0x0,0xe000,0x380,0xe000,0x0,0x2000000,0x0,0x4000000,0x0,0xc00000,0x380,0x380,0x200000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x40,0x8000,0x40000,0x0,0x0,0x40000,0x0,0x40,0x400000,0x3,0x3,0x40000,0x80000,0x0,0x40,0x0,0x0,0x400c0,0x0,0x40000,0x0,0x40,0x400000,0x3,0x3,0x40000,0x80000,0x0,0x40,0x0,0x0,0x400c0,0x0,0x40000,0x0,0x40,0x400000,0x3,0x3,0x40000,0x80000,0x0,0x40,0x0,0x0,0x400c0,0x0,0x40000,0x0,0x40,0x400000,0x40,0x40,0x0,0x0,0x0,0x3,0x400000,0x0,0x40,0x0,0x40,0x40,0x0,0x4,0x4,0x0,0x0,0x0,0x38,0x0,0x0,0x40,0x400000,0x3,0x3,0x0,0x40,0xc0,0x40000,0x0,0x0,0x0,0x400000,0x3,0x3,0x0,0x40,0xc0,0x40000,0x0,0x40000,0x44,0x0,0x44,0x0,0x44,0x0,0x0,0x0,0x40,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public aovgraph(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public aovgraph(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new aovgraphTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public aovgraph(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new aovgraphTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public aovgraph(aovgraphTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(aovgraphTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 103; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    referencias = new java.util.Vector<String>();
    componentes = new java.util.Vector<String>();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 103; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
